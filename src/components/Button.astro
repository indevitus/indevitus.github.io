---
const { primary = false, link = '/', title} = Astro.props;
---

<button id={`button-${title}`} class="blob-btn" data-link={link}>
  <slot />
  <span class={`blob-btn__inner ${primary  ? 'bg-primary' : 'bg-white dark:bg-secondary'}`}>
    <span class="blob-btn__blobs">
      <span class="blob-btn__blob"></span>
      <span class="blob-btn__blob"></span>
      <span class="blob-btn__blob"></span>
      <span class="blob-btn__blob"></span>
    </span>
  </span>

  <svg
    class="h-0 w-0"
    xmlns="http://www.w3.org/2000/svg"
    version="1.1"
  >
    <defs>
      <filter id="goo">
        <feGaussianBlur in="SourceGraphic" result="blur" stdDeviation="10"
        ></feGaussianBlur>
        <feColorMatrix
          in="blur"
          mode="matrix"
          values="1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 21 -7"
          result="goo"></feColorMatrix>
        <feBlend in2="goo" in="SourceGraphic" result="mix"></feBlend>
      </filter>
    </defs>
  </svg>
</button>


<script>
  const buttons = document.querySelectorAll('[id^="button-"]');

  function isValidURL(text: string) {
    let res = text.match(
      /(http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/g,
    );
    return res !== null;
  }

  buttons.forEach((button) => {
    const link = button.getAttribute('data-link');

    button.addEventListener("click", () => {
      if (link) {
        if (isValidURL(link)) {
          window.open(link, '_blank');
        } else {
          window.location.href = link;
        }
      }
    });
  });
</script>

<style>
  .blob-btn {
    @apply z-[1] relative px-8 py-4 text-center uppercase text-black dark:text-white font-bold transition-colors duration-500 rounded-[30px] whitespace-nowrap;
  }

  .blob-btn:before {
    @apply content-[""] z-[1] absolute left-0 top-0 w-full h-full border border-solid border-secondary rounded-[30px];
  }

  .blob-btn:after {
    @apply content-[""] -z-[2] absolute left-[3px] top-[3px] w-full h-full transition-all duration-500 delay-200 rounded-[30px];
  }

  .blob-btn:hover {
    @apply text-white dark:text-black rounded-[30px];
  }

  .blob-btn:hover:after {
    @apply transition-all duration-[450ms] left-0 top-0 rounded-[30px];
  }

  .blob-btn__inner {
    @apply -z-[1] overflow-hidden absolute left-0 top-0 w-full h-full rounded-[30px];
  }

  .blob-btn__blobs {
    @apply relative block h-full [filter:url('#goo')];
  }

  .blob-btn__blob {
    @apply absolute top-[2px] w-[calc(100%/4)] h-full bg-secondary dark:bg-white rounded-full transition-transform duration-[450ms] [transform:translate3d(0,_150%,_0)_scale(1.7)];
  }

  @supports (filter: url("#goo")) {
    .blob-btn__blob {
      transform: translate3d(0, 150%, 0) scale(1.4);
    }
  }

  .blob-btn__blob:nth-child(1) {
    left: calc((1 - 1) * (120% / 4));
    transition-delay: calc((1 - 1) * 0.08s);
  }

  .blob-btn__blob:nth-child(2) {
    left: calc((2 - 1) * (120% / 4));
    transition-delay: calc((2 - 1) * 0.08s);
  }

  .blob-btn__blob:nth-child(3) {
    left: calc((3 - 1) * (120% / 4));
    transition-delay: calc((3 - 1) * 0.08s);
  }

  .blob-btn__blob:nth-child(4) {
    left: calc((4 - 1) * (120% / 4));
    transition-delay: calc((4 - 1) * 0.08s);
  }

  .blob-btn:hover .blob-btn__blob {
    transform: translateZ(0) scale(1.7);
  }

  @supports (filter: url("#goo")) {
    .blob-btn:hover .blob-btn__blob {
      transform: translateZ(0) scale(1.4);
    }
  }
</style>
